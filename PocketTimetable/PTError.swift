//
// MIT License
//
// Copyright (c) 2020 Joseph El Mallah
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import Foundation

/// Errors generated by the app or framework.
public enum PTError: Error, LocalizedError {
    /// A networking error wrapping the original error and containing a debug description
    case networkingError(wrappedError: Error?, debugDescription: String?)
    /// A networking response error caused by a HTTP status along the response body as a String
    case responseError(status: Int, bodyAsString: String?)
    /// A data parsing error wrapping the original error and containing a debug description
    case dataError(wrappedError: Error?, debugDescription: String?)
    /// An error when fetching location
    case locationError(wrappedError: Error)

    public var errorDescription: String? {
        switch self {
            case let .networkingError(wrappedError: error, debugDescription: _):
                return error?.localizedDescription ?? "Unknown Error"
            case let .responseError(status: status, bodyAsString: _):
                return "HTTP Status \(status)"
            case let .dataError(wrappedError: error, debugDescription: _):
                return error?.localizedDescription ?? "Unknown Error"
            case let .locationError(wrappedError: error):
                return error.localizedDescription
        }
    }
}
